<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Core on Sian</title>
    <link>https://sunnyday0932.github.io/tags/core/</link>
    <description>Recent content in Core on Sian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 13 Dec 2021 01:40:45 +0000</lastBuildDate><atom:link href="https://sunnyday0932.github.io/tags/core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Serilog 簡單紀錄 Log</title>
      <link>https://sunnyday0932.github.io/2021/%E4%BD%BF%E7%94%A8-serilog-%E7%B0%A1%E5%96%AE%E7%B4%80%E9%8C%84-log/</link>
      <pubDate>Mon, 13 Dec 2021 01:40:45 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2021/%E4%BD%BF%E7%94%A8-serilog-%E7%B0%A1%E5%96%AE%E7%B4%80%E9%8C%84-log/</guid>
      <description>前言 本篇主要紀錄簡單應用，多會使用 Linqpad 加以介紹。
本文 首先依據官方文件我們需要先安裝 Serilog 的 Nuget 套件。
要安裝的有以下三個：
安裝完成後就可以使用官方提供的範例來練習寫一個 Log
void Main() { Log.Logger = new LoggerConfiguration() .MinimumLevel.Debug() .WriteTo.Console() .WriteTo.File(&amp;#34;D:/logs/myapp.txt&amp;#34;, rollingInterval: RollingInterval.Day) .CreateLogger(); Log.Information(&amp;#34;Log Test&amp;#34;); int a = 10, b = 0; try { Log.Debug(&amp;#34;Dividing {A} by {B}&amp;#34;, a, b); Console.WriteLine(a / b); } catch (Exception ex) { Log.Error(ex, &amp;#34;Something went wrong&amp;#34;); } finally { Log.CloseAndFlush(); } } 在上面這個範例中，我們指定了 Log 存放於 D:/logs/myapp.txt 這個檔案中，而後面這個變數則可以指定存放的檔案名稱是以甚麼來做為區分，目前是使用當天日期。
也是有其他的選項可以做選擇
範例
Log 內的檔案資訊如圖</description>
    </item>
    
    <item>
      <title>使用 IHostedService 建立背景排程</title>
      <link>https://sunnyday0932.github.io/2021/%E4%BD%BF%E7%94%A8ihostedservice%E5%BB%BA%E7%AB%8B%E8%83%8C%E6%99%AF%E6%8E%92%E7%A8%8B/</link>
      <pubDate>Mon, 28 Jun 2021 05:40:45 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2021/%E4%BD%BF%E7%94%A8ihostedservice%E5%BB%BA%E7%AB%8B%E8%83%8C%E6%99%AF%E6%8E%92%E7%A8%8B/</guid>
      <description>前言 在前幾篇研究快取的時候發現公司大神有在快取示範中使用了 IHostedService 這個東西，之前是選擇性跳過，這次發現接下來要做的東西會用上，還不馬上補齊。
本文 IHostedService是甚麼呢?
簡單來說就是 Core 內建的一個背景處理的介面，可以簡單的透過 BackgroundService 這個基底類別來使用它。
官方文件也提到幾點可以透過 IHostedService 簡單處理的東西：
接下來我們就來練習實作使用這個東西。
首先建立一個 Core API 的範例程式
接著就可以建立一個 HostService 並且繼承 BackgroundService ，繼承完後應該會馬上就看到提示需要實作 ExecuteAsync ，這個 ExecuteAsync 就是我們可以拿來實作排程。
public class HostService : BackgroundService { protected override Task ExecuteAsync(CancellationToken stoppingToken) { throw new NotImplementedException(); } } 簡單測試我們寫一個每10秒會去 D:/ 寫入 log 檔的背景程序。
public class HostService : BackgroundService { private readonly string _filePath; public HostService(string filePath) { this._filePath = filePath; } /// &amp;lt;summary&amp;gt; /// This method is called when the &amp;lt;see cref=&amp;#34;T:Microsoft.</description>
    </item>
    
    <item>
      <title>CoreProfiler - 監看 WebApi 效能的工具</title>
      <link>https://sunnyday0932.github.io/2021/coreprofiler-%E7%9B%A3%E7%9C%8Bwebapi%E6%95%88%E8%83%BD%E7%9A%84%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Thu, 29 Apr 2021 19:40:45 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2021/coreprofiler-%E7%9B%A3%E7%9C%8Bwebapi%E6%95%88%E8%83%BD%E7%9A%84%E5%B7%A5%E5%85%B7/</guid>
      <description>前言 接下來會用到 CoreProfiler 這個工具來觀看我們API的效能，就花一點時間紀錄一下用法。
本文 CorePofiler 這個工具是提供給 Core 版本的效能工具，也有給 dotnet framework 的版本 NanoProfiler。
用到的Nuget CoreProfiler.Web 安裝在 Application。 CoreProfiler 安裝在 Application 跟要監看的類別庫。 使用方式 1、在我們需要監看的地方加上以下程式。
var stepName = $&amp;#34;{nameof(這邊是監看的類別)}.{nameof(這邊是監看的方法)}&amp;#34;; using (ProfilingSession.Current.Step(stepName)) { } 2、在 Service 與 Repository 的地方都加上。
Service：
Repository：
3、若要監看與 DB 存取資料的狀況，可以到 DatabaseHelper 這麼做。
/// &amp;lt;summary&amp;gt; /// 建立連線 /// &amp;lt;/summary&amp;gt; /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; public IDbConnection GetConnection(string connectionString) { var conn = new ProfiledDbConnection ( new SqlConnection(connectionString), () =&amp;gt; ProfilingSession.Current is null ? null : new DbProfiler(ProfilingSession.</description>
    </item>
    
    <item>
      <title>dotnet Core WebApi - EFCore</title>
      <link>https://sunnyday0932.github.io/2021/dotnet-core-webapi-efcore/</link>
      <pubDate>Fri, 22 Jan 2021 19:40:45 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2021/dotnet-core-webapi-efcore/</guid>
      <description>前言 前面我們已經練習過使用 Dapper，剛好前輩提起 EF 也是需要練習熟悉的，就做了一個 EF Core 的版本，基本上內容與先前 API 第二版本大致相同，這邊就只會列出差異部分與碰到的問題。
本文 一、首先我們會需要先安裝三個 EF 需要使用到的 Nuget 套件。 分別是：
Nuget名稱 安裝地點 EntityFrameworkCore Repository EntityFrameworkCore.SqlServer Repository EntityFrameworkCore.Tools Controller 二、接下來需要輸入指令建立 EFCore 所使用的 DBContext。 完整指令如下：
Scaffold-DbContext &amp;#39;Data Source=localhost;Database=Northwind;Trusted_Connection=True;&amp;#39; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Conditions -Tables Users -context AccountContext -Project WebApiEFCoreRepository -force 這邊提一下指令由前到後介紹：
Scaffold-DbContext &amp;#39;Data Source=localhost;Database=Northwind;Trusted_Connection=True;&amp;#39; Microsoft.EntityFrameworkCore.SqlServer 這段是我們與 DB 連線字串，然後指定所使用的 DB 是 SQL server。
-OutputDir Conditions 這邊是生成檔案放置地點。
-Tables Users 指定的 Table 名稱。
-context AccountContext 這是會生成的 DBContext 檔案名稱，這邊我取名為 AccountContext。
-Project WebApiEFCoreRepository -force 指定生成在 Repository 專案，最後的 force 其實第一次生成 DBContext 時不用加，但後續要再加 Table 的時候可能會用上；至於我為甚麼留著呢？那當然是因為 懶惰</description>
    </item>
    
    <item>
      <title>依賴注入 DI(Dependency Injection)</title>
      <link>https://sunnyday0932.github.io/2020/%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5-didependency-injection/</link>
      <pubDate>Wed, 02 Dec 2020 22:19:33 +0800</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5-didependency-injection/</guid>
      <description>前言 終於寫到DI了，這應該是一開始學習三層式架構後的第二座高山，直到今天我也還不敢稱自己完全懂，頂多只能說是會用，剛好藉著這次機會複習概念。
本文 講解 DI 前會有兩個先行觀念需要了解，分別是：
1、DIP(Dependency Inversion Principle) 依賴反轉。 2、IOC(Inversion of Control) 控制反轉。 1、DIP 依賴反轉。 複習一下前面講解到的依賴反轉概念：
我們了解到 DIP 最重要的目標是要解除物件與物間之間直接依賴的關係。
不熟的同學起點這複習。
2、IOC 控制反轉。 那甚麼又是控制反轉呢？
控制反轉最重要的概念是：
把對於某個物件的控制權移轉給第三方容器。 甚麼意思呢？
回憶一下，還記得前面實作的第一版API嗎？
我們的 Controller 在跟 Repository 要資料的時候是怎麼做的呢？ 看到關鍵字了嗎？
沒有？那這樣呢？
就是那個 NEW 代表著我們的 Controller 其實是直接依賴 Repository 的。
他們之間的關係如下圖。
所以理想中 IOC 概念我們的關係圖應該長這樣： 我們的 Controller 應該把對於 Repository 的控制權移交給 IOC。
3、DI 依賴注入。 講了這麼多那所以甚麼是 DI 呢？
聰明的同學應該發現了上述的 DIP、IOC 都只是一種精神、概念；而 DI 就是實現上述兩種精神的方法。
講解 DI 的精神最經典的就是： 好萊塢原則 (Hollywood Principle)
don‘t call us, we‘ll call you</description>
    </item>
    
    <item>
      <title>Automapper 類別轉換好用工具</title>
      <link>https://sunnyday0932.github.io/2020/automapper-%E9%A1%9E%E5%88%A5%E8%BD%89%E6%8F%9B%E5%A5%BD%E7%94%A8%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 25 Nov 2020 22:19:33 +0800</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/automapper-%E9%A1%9E%E5%88%A5%E8%BD%89%E6%8F%9B%E5%A5%BD%E7%94%A8%E5%B7%A5%E5%85%B7/</guid>
      <description>前言 上一篇介紹了三層式架構，有些人可能會有疑問，三層各有自己的 Model ，那要怎麼將各個 Model 轉換呢？
難道是每一次轉換都需要跑一次迴圈，那也太麻煩了；這時就要介紹好用的工具 Automapper了。
本文 基本用法 首先到 Nuget 安裝 Automapper。 安裝好後我們建立兩個測試用的 Model
private class Model1 { public string Name { get; set; } public int Id { get; set; } } private class Model2 { public string Name { get; set; } public int Id { get; set; } } 使用 Automapper 對應 Model1 到 Model2。
var testModel = new Model1 { Name = &amp;#34;ALLEN&amp;#34;, Id = 1 }; var config = new MapperConfiguration(cfg =&amp;gt; cfg.</description>
    </item>
    
    <item>
      <title>三層式架構</title>
      <link>https://sunnyday0932.github.io/2020/%E4%B8%89%E5%B1%A4%E5%BC%8F%E6%9E%B6%E6%A7%8B/</link>
      <pubDate>Sun, 15 Nov 2020 22:19:33 +0800</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/%E4%B8%89%E5%B1%A4%E5%BC%8F%E6%9E%B6%E6%A7%8B/</guid>
      <description>前言 接下來開始講解三層式架構，這是工作以來第一個學會的架構，也使用了一段時間，就以這段時間自己的體悟來敘述。
本文 為甚麼要分層呢？ 前一篇我們提到，如果程式全部一條龍寫到底，後續會產生很多問題，難以維護、難以閱讀、更甚至是萬一人家要接手你的程式碼，這時候改Ａ壞Ｂ，耦合度過高的情況下，你只能祈禱接手的人不知道你住哪。
這種情況下只有自己寫可能還好，那如果需要跟人合作呢？
大家可能容易出現重複的 Code，也難以說明誰該負責寫哪部分。
這時候有一個好的架構，就很重要了。
優缺點 優點 1、較好形成一個規範，可做為標準化流程。 2、提高重用性，透過分層將相同類型的程式碼放在一塊。 3、團體合作的時候，能夠分層進行；開發人員只需專注於自己開發的那一層即可。 4、具有好的開放性、可擴充性優點。 5、降低程式碼之間的依賴，每層溝通是透過介面。 6、提高系統安全性，因為使用者需要透過 Service 層才有機會與下一層 Repository 撈取資料。 缺點 1、增加了開發成本，傳統一個人負責寫到底；分層下需要多人進行合作。 2、調整程式可能會出現連動性；有的時候修改一個地方，會導致其他層也需要跟著調整。 3、相較於一條龍開發系統性能下降，原本程式可以直接透過DB撈取資料，現在需要透過中間層的轉介才能夠拿到。 簡介 三層式架構顧名思義，主要分為了三層：
1、Controller：控制層，作為接口。 2、Service：商業邏輯層，只要有關商業邏輯部分的處理全部放在這一層。 3、Repository：倉儲層，作為資料存儲的一層。 4、Common：共用層，作為存放各層會用到的相同東西。 他們之間的關係如下圖:
Service 從最重要的 Service 層開始講解起。
在我們程式中『最重要』的就屬於商業邏輯了，這一層是會特別關注的一層；這邊大家可能會問，那商業邏輯是指哪些呢？
我自己認為最簡單分辨的方式，舉凡任何需要對資料特別處理的地方都會是放在這一層，如常見的：登入驗證、加減法運算、確認是否驗證成功等。
Controller 在我們 WebAPI 中，Controller 就屬於接口，負責處理 Router，如常見的：Get、Post、Patch 等，都會是在這層負責接應相對應的路由。
Repository 資料倉儲層，這層主要處理『有關資料串接』的部分，如：資料庫連接、下 SQL 取 Table 資料等，都會是在 Repository 處理。
這邊有個特別的地方，如果我們程式需要透過別人的API取的資料回來做處理呢？
那與對方 API 串接的地方就會是 Repository，所以 Repository 是處理『有關資料串接』的地方，而這資料當然並不只限於從 DB 撈取的資料。
Common 共用層相對單純，存放各層間會用到的共同東西，最常見的例如：Enum，就會放在這一層。
各層相互傳遞的參數 各層間會有自己的 Model，就是透過這些 Model 來溝通，如下圖：
Controller：接收的是 Parameter，輸出的是 ViewModel。 Service：接收的是 InfoModel，輸出的是 Dto。 Repository：接收的是 Condition，輸出的是 DataModel。 使用三層式架構常見的問題 1、三層式架構與傳統 MVC 有甚麼不同呢？ 傳統 MVC 分成，View(展示層)-Model(資料層)-Controller(控制層)，這邊與三層式架構最大的區別在於傳統MVC並沒有特別把『商業邏輯』抽出來；常會看到傳統 MVC 可能會把商業邏輯附加在 Controller，所以 MVC 與三層式架構是不同的。</description>
    </item>
    
    <item>
      <title>dotnet Core WebApi實作-5 小結分析</title>
      <link>https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C-5-%E5%B0%8F%E7%B5%90%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 10 Nov 2020 22:19:33 +0800</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C-5-%E5%B0%8F%E7%B5%90%E5%88%86%E6%9E%90/</guid>
      <description>本文 先前完成了 API，接下來聊聊目前這樣做法可能會碰到的問題。
1、程式碼四散。 現在做法是從 Controller 決定執行動作後，到 Repository 撈取 DB 資料後回傳 json；那麼今天假如有要處理的關鍵商業邏輯，是該寫在 Controller 或是 Repository 呢？
又如果今天多人合作的情況下，甲覺得應該放在 Repository、而乙覺得應該放在 Controller ，這樣就會造成程式碼四散，對後續要維護的人造成很大的困擾。
2、容易有重工。 現行做法如果多人合作的時候，可以用 Repository 名稱來定義是從哪個 DB 撈取資料； Controller 也可以明確定義出接口，那承上所述的商業邏輯呢？又或是因為大家要處理的 Model 不同因此再合作的時候建了一堆不同的 Model 出來，卻其實是撈同一個 Table 的資料，應該想辦法避免做重複的事情。
3、耦合過高。 現行做法很容易再單一的 class 做了太多事，還記得前幾篇提到的 SOLID 原則嗎？若所有事情都包在同一個 class中完成，藕合度就會過高這種情況應該要想辦法解決。
那有甚麼好方法呢？ 像傳統的 MVC 就是把程式分成 Model-View-Controller。
1、Model：處理商業邏輯、資料傳輸的 Model、與資料庫進行溝通。 2、Controller：負責當接口、控制程式的流程。 3、View：負責呈現，ex:畫面啦、程式應該回傳的結果。 透過將程式分開讓藕合性降低、也讓後續維護者好維護。
其他如:DDD、三層式架構等，都有自己得優缺點，下篇我們會介紹三層式架構，再將 API 實作。
參考連結 1、維基百科MVC。 2、MVC 架構與說明 ( 以Asp .Net MVC C# 為例 ) 3、MVC 三層架構 是什麼? 我只知道三層肉 </description>
    </item>
    
    <item>
      <title>dotnet Core WebApi實作-4 RESTful API介紹</title>
      <link>https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C-4-restful-api%E4%BB%8B%E7%B4%B9/</link>
      <pubDate>Thu, 29 Oct 2020 22:19:33 +0800</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C-4-restful-api%E4%BB%8B%E7%B4%B9/</guid>
      <description>本文 REST 是 Representational State Transfer 的縮寫，是一種設計模式，RESTful API 就是遵循這種設計模式所創造的 API。
那 RESTful 是怎樣的一個設計模式呢? 首先組成 RESTful API 三大要素有:
組成要素 說明 1、Nouns (名詞) 一組獨一無二的 URL 用來定義網址。 2、Verbs (動詞) 用來描述對 URL 所執行的動作，也就是 HTTP Method。 3、Content Types(資源呈現方式) API 資源呈現的方式 EX:JSON、XML。 以前幾篇的 API 為範例:
Method router 說明 GET api/Product 取得商品列表 POST api/Product 新增商品 PATCH api/Product 修改商品資訊 DELETE api/Product/85 商除指定商品 固定的 Router，但使用 Method 來區分要進行的動作，好處是不會有五花八門的 router 出現，一旦用了此種模式，大家就能輕易區分 API 會做些甚麼，我該取用哪隻 API。
常見的 Method 有以下幾種:
Method 說明 GET 讀取資料 POST 新增資料，亦可作為其他動詞使用。 PUT 更新 PATCH 部分更新資料 DELETE 刪除資料 備註: POST 被視作萬用動詞，可以作為其他動作。</description>
    </item>
    
    <item>
      <title>dotnet Core WebApi實作(使用Dapper、Swagger、Postman)-3</title>
      <link>https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C%E4%BD%BF%E7%94%A8dapperswaggerpostman-3/</link>
      <pubDate>Mon, 12 Oct 2020 22:19:33 +0800</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C%E4%BD%BF%E7%94%A8dapperswaggerpostman-3/</guid>
      <description>本文 修改 1、修改指定商品 Repository
/// &amp;lt;summary&amp;gt; /// 修改商品內容 /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;#34;productModel&amp;#34;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; public bool UpdateProduct(ProductModel productModel) { var sql = @&amp;#34;UPDATE products SET productname = @ProductName, supplierid = @SupplierID, categoryid = @CategoryID, quantityperunit = @QuantityPerUnit, unitprice = @UnitPrice, unitsinstock = @UnitsInStock, unitsonorder = @UnitsOnOrder, reorderlevel = @ReorderLevel, discontinued = @Discontinued WHERE productid = @ProductID &amp;#34;; var parameters = new DynamicParameters(); parameters.Add(&amp;#34;@ProductName&amp;#34;, productModel.ProductName); parameters.Add(&amp;#34;@SupplierID&amp;#34;, productModel.SupplierID); parameters.Add(&amp;#34;@CategoryID&amp;#34;, productModel.CategoryID); parameters.Add(&amp;#34;@QuantityPerUnit&amp;#34;, productModel.</description>
    </item>
    
    <item>
      <title>dotnet Core WebApi實作(使用Dapper、Swagger、Postman)-2</title>
      <link>https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C%E4%BD%BF%E7%94%A8dapperswaggerpostman-2/</link>
      <pubDate>Tue, 29 Sep 2020 22:19:33 +0800</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C%E4%BD%BF%E7%94%A8dapperswaggerpostman-2/</guid>
      <description>前言 我們接續著上次的介紹，會把 CRUD 功能補齊。
CRUD 指的是Create(新增)、Read(查詢)、Delete(刪除)、Update(更新)，也是最常運用到的功能。
本文 新增 1、首先我們先建立一個用來回傳的 Model。
建立 ResultModel
public class ResultModel { /// &amp;lt;summary&amp;gt; /// 結果 /// &amp;lt;/summary&amp;gt; public bool Result { get; set; } /// &amp;lt;summary&amp;gt; /// 提示訊息 /// &amp;lt;/summary&amp;gt; public string Message { get; set; } } 2、把新增商品的 Repository 完成。
新增商品 Repository
/// &amp;lt;summary&amp;gt; /// 新增一筆商品 /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;#34;productModel&amp;#34;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; public bool CreateProduct(ProductModel productModel) { var sql = @&amp;#34;INSERT INTO products (productname, supplierid, categoryid, quantityperunit, unitprice, unitsinstock, unitsonorder, reorderlevel, discontinued) VALUES (@ProductName, @SupplierID, @CategoryID, @QuantityPerUnit, @UnitPrice, @UnitsInStock, @UnitsOnOrder, @ReorderLevel, @Discontinued) &amp;#34;; var parameters = new DynamicParameters(); parameters.</description>
    </item>
    
    <item>
      <title>dotnet Core WebApi實作(使用Dapper)-1</title>
      <link>https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C%E4%BD%BF%E7%94%A8dapper-1/</link>
      <pubDate>Tue, 22 Sep 2020 22:19:33 +0800</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/dotnet-core-webapi%E5%AF%A6%E4%BD%9C%E4%BD%BF%E7%94%A8dapper-1/</guid>
      <description>前言 終於進入 WebApi 部分，也是目前工作最常做的一部分。
這邊會從原始 MVC 作為開頭介紹，內容會帶入 Dapper、Restful 介紹，以及一些好用小工具分享。
本文 一、事前準備 1、首先我們先建立一個 core 專案。 選擇 API 建立 2、資料庫準備。 先到此連結下載北風資料庫
點選 instnwnd.sql，選擇 Download。 會看到瀏覽器顯示一長串 SQ L語法，把這邊全部複製起來。 到 SSMS 點選新增查詢，把語法貼上後執行。 看到資料庫出現 Northwind 代表成功。 二、API 開發 1、首先我們建立一個 Models 資料夾。 建立一個 ProductModel 類別，對應北風資料庫的 Products。 建立 ProductModel
public class ProductModel { /// &amp;lt;summary&amp;gt; /// 商品流水號 /// &amp;lt;/summary&amp;gt; public int ProductID { get; set; } /// &amp;lt;summary&amp;gt; /// 商品名稱 /// &amp;lt;/summary&amp;gt; public string ProductName { get; set; } /// &amp;lt;summary&amp;gt; /// 供應商ID /// &amp;lt;/summary&amp;gt; public int SupplierID { get; set; } /// &amp;lt;summary&amp;gt; /// 種類ID /// &amp;lt;/summary&amp;gt; public int CategoryID { get; set; } /// &amp;lt;summary&amp;gt; /// 每單位數量 /// &amp;lt;/summary&amp;gt; public string QuantityPerUnit { get; set; } /// &amp;lt;summary&amp;gt; /// 每單位價格 /// &amp;lt;/summary&amp;gt; public decimal UnitPrice { get; set; } /// &amp;lt;summary&amp;gt; /// 每單位稅額 /// &amp;lt;/summary&amp;gt; public Int16 UnitsInStock { get; set; } /// &amp;lt;summary&amp;gt; /// 每單位訂購價 /// &amp;lt;/summary&amp;gt; public Int16 UnitsOnOrder { get; set; } /// &amp;lt;summary&amp;gt; /// 重新訂購等級 /// &amp;lt;/summary&amp;gt; public Int16 ReorderLevel { get; set; } /// &amp;lt;summary&amp;gt; /// 是否已停產 /// &amp;lt;/summary&amp;gt; public bool Discontinued { get; set; } } 這邊各欄位的型態可以先看 DB 內資料類型</description>
    </item>
    
  </channel>
</rss>
