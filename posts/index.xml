<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sian</title>
    <link>https://sunnyday0932.github.io/posts/</link>
    <description>Recent content in Posts on Sian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sunnyday0932.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Json格式轉換，序列化(Serialize)與反序列化(Deserialize)</title>
      <link>https://sunnyday0932.github.io/2020/json%E6%A0%BC%E5%BC%8F%E8%BD%89%E6%8F%9B%E5%BA%8F%E5%88%97%E5%8C%96serialize%E8%88%87%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96deserialize/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/json%E6%A0%BC%E5%BC%8F%E8%BD%89%E6%8F%9B%E5%BA%8F%E5%88%97%E5%8C%96serialize%E8%88%87%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96deserialize/</guid>
      <description>前言 今天在工作上剛好碰到了要將字串轉換成Json格式傳遞給別人，遇到了有趣的事情特別記錄一下。
本文 一開始很好奇我擷取的字串出來序列化的Json格式，會多出空行的符號\r\n。
&amp;#34;{\&amp;#34;A\&amp;#34;:\&amp;#34;ss\r\nss\&amp;#34;,\&amp;#34;B\&amp;#34;:\&amp;#34;ss\nss\&amp;#34;}&amp;#34; 於是就跟同事討論起這件事，我一開始想法是這是不是會影響別人收到後處理結果呢?
同事做了簡單範例解釋。
class Program { static void Main(string[] args) { var objTest = new Test { A = &amp;#34;ss\r\nss&amp;#34;, B = &amp;#34;ss\nss&amp;#34; }; var jsonObj = JsonConvert.SerializeObject(objTest); Console.WriteLine(jsonObj); var obj2 = JsonConvert.DeserializeObject&amp;lt;Test&amp;gt;(&amp;#34;{\&amp;#34;A\&amp;#34;:\&amp;#34;ss\r\nss\&amp;#34;,\&amp;#34;B\&amp;#34;:\&amp;#34;ss\nss\&amp;#34;}&amp;#34;); Console.WriteLine(obj2.A); Console.WriteLine(obj2.B); } public class Test { public string A { get; set; } public string B { get; set; } } } 輸出結果
Json格式會有自己特殊的跳脫字元，而在反序列化中程式就會將字串轉換成我們看到的正常樣貌。
所以結論就是，通通丟給對方處理就對了🤟
參考連結  1、Json官方文件 2、瞭解Json格式  </description>
    </item>
    
    <item>
      <title>Object Oriented物件導向-2:建構式(Constructor)、多載(Overloading)與覆寫(Overriding)</title>
      <link>https://sunnyday0932.github.io/2020/object-oriented%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-2_%E5%BB%BA%E6%A7%8B%E5%BC%8Fconstructor%E5%A4%9A%E8%BC%89overloading%E8%88%87%E8%A6%86%E5%AF%ABoverriding/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/object-oriented%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-2_%E5%BB%BA%E6%A7%8B%E5%BC%8Fconstructor%E5%A4%9A%E8%BC%89overloading%E8%88%87%E8%A6%86%E5%AF%ABoverriding/</guid>
      <description>本文 1、建構式(Constructor)
 實體化類別的動作，也就是New這個步驟。 建構式與類別同名，無return值。 大話設計模式：其實就是對類別進行初始化。建構式與類別同名，無返回值，也不需要void，在New時調用。  Public class 特斯拉() { private 輪子(){} private 方向盤(){} private 電池(){} } 特斯拉 車子 = new 特斯拉(); //這樣我們就可以得到一輛車子並且知道車子具有輪子、方向盤、電池 2、多載(Overloading)
 相同function名稱，可以有不同參數或不同的型別。 大話設計模式：多載提供了建立同名的多個方法的能力，但這些方法須使用不同的參數類型。
2020/06/30 修改範例  //首先建立一個特斯拉的類別。 Public class 特斯拉 { public void 配件() //預設基本配件有輪子、方向盤、電池。 	{ private 輪子(){} private 方向盤(){} private 電池(){} } public void 配件(int 加購價 ) //加購價的配件會有更高級的配備。 	{ private 跑車輪子(){} private 跑車方向盤(){} private 高電量電池(){} } } 特斯拉 ModelX = new 特斯拉(); ModelX.</description>
    </item>
    
    <item>
      <title>Object Oriented物件導向-1:類別(Class)與實體(Object)</title>
      <link>https://sunnyday0932.github.io/2020/object-oriented%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-1_%E9%A1%9E%E5%88%A5class%E8%88%87%E5%AF%A6%E9%AB%94object/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/object-oriented%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-1_%E9%A1%9E%E5%88%A5class%E8%88%87%E5%AF%A6%E9%AB%94object/</guid>
      <description>前言 這系列文會整理進目前公司以來所學，目標是釐清自己觀念、脫離只知其一不知其二的狀態，故文章將會不停更新。
本文 1、類別(class)
 在程式設計中類別就像設計圖、它描繪出設計出來的樣貌。 大話設計模式：類別就是具有相同之屬性和功能的物件抽象集合。 Ex:汽車設計圖、建築物設計圖。
  2、物件(Object)
 實際設計出來的物品。 大話設計模式：物件是一個獨立自主的實體，用一組可識別的特性和行為來標示。 Ex:特斯拉汽車、101大樓。
  3、實體化
 描繪類別變成實體物件的狀態。 Ex:C#程式中會使用New來實體化出一個物件。  class 車子 { private 輪子(){} private 電池(){} private 方向盤(){} } 車子 特斯拉 = new 車子() 問題討論 這邊的問題取自保哥物件導向基礎，建議往下看前先自行思考作答。
 1、請問「類別」可不可以包含「物件」？ 2、請問「物件」可不可以包含「類別」？ 3、請問「類別」可不可以包含「類別」？ 4、請問「物件」可不可以包含「物件」？ 5、請問「物件」可不可以當成資料傳遞？ 6、請問「類別」可不可以當成資料傳遞？ 7、 在 .NET 的世界，請問「物件」可以用什麼型態存在或用什麼格式傳遞？（可任意回答一種以上） 8、在 .NET 的世界，請問「類別」可以用什麼型態存在或用什麼格式傳遞？（可任意回答一種以上） 9、在 .NET 的世界，程式在執行的時候，「類別」可不可以被動態修改？ 10、如果有兩台主機要互相傳遞資料，他們傳遞的是「類別」還是「物件」？ 11、請問「物件」是否包含「方法(Method)」？ 12、如果「物件」從 A 電腦傳遞到 B 電腦時，若該物件要執行「方法」還需不需要有「類別」存在？
   作答
1、不可以。本題提供同事講解易懂方式 Ex:特斯拉設計圖內不會包含真的特斯拉。
2、不可以。物件是實體的東西、而類別再被new出來前都是虛擬的，故實體物件不應該包含虛擬類別。</description>
    </item>
    
    <item>
      <title>閱讀心得:Soft Skills 軟實力｜軟體開發人員的生存手冊</title>
      <link>https://sunnyday0932.github.io/2020/%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97_soft-skills-%E8%BB%9F%E5%AF%A6%E5%8A%9B%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E4%BA%BA%E5%93%A1%E7%9A%84%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8A/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97_soft-skills-%E8%BB%9F%E5%AF%A6%E5%8A%9B%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E4%BA%BA%E5%93%A1%E7%9A%84%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8A/</guid>
      <description>前言 這是踏入職場後第一本挑選的書，起因是公司教育訓練文件最後前輩列了一系列書單，其中名字最特別、歸類又不是技術類，看了試閱的第一頁就決定買了。
本文  目錄
 序:這是一本你從未見過的軟體開發書 Section 1 職涯 Section 2 自我行銷 Section 3 學習 Section 4 生產力 Section 5 理財 Section 6 健身 Section 7 心靈
目錄應該很明顯，這真的是從未見過專門寫給軟體開發人員的密技；玩遊戲都會都看密技了，職涯看一下應該也很合理。
這本書就是把踏入這行會發生的全部過程拆解，細分後再加以分析利弊整理出一些可供參考的方式。
拿第一章職涯作為舉例，當談到如何設立職涯目標的時候作者會先敘述自己的經驗並給出一些建議，再來教你如何設定出真正可以執行的目標(不會好高騖遠)，最後會給出練習的方式。
照著每一小節的練習，確實可以有助於自己思考與規劃。
最特別的大概是最後三章:理財、健身、心靈。
這部分作者就跳脫出職業生活的部分，提醒的是儘管開發人員有多熱愛自己的工作，下了班你還是會回歸日常。
而這部分就是針對日常生活給出的建議。
其中健身這章可以拉出來特別提一下，因為本身也開始健身兩年了，這本書對於健身觀念真的非常正確，不管是計算卡路里方式、制定健身課表、飲食全方位講解都很透徹。
作者也提到，因為職涯長時間坐著對開發人員真的是一大傷害；運動不僅能帶給職涯很多正面的幫助，要想達成目標，擁有健康的身體亦是必要條件，這也是我開始健身的初衷之一。   後記  這本書大概是一月入手，當時因為教育訓練落後狀態低迷，沒有想太多就是想趕快進步，看完也五個月過去了，這中間斷斷續續的閱讀、但堅持每個小節的即知即行都要自己做一遍，真的對我幫助不小；包含了現在決定開始經營部落格，有一部分原因也是因為看了這本書。
強烈建議軟體開發人員有機會都可以看看這本書，真的會對你職涯規劃有所幫助，但當然作者與我們生活環境落差，有些經驗並不適用於每個人，不能照單全收，這也是需要自行判斷，最後就像書中所述step by step有一天一定能達到自己目標的。</description>
    </item>
    
    <item>
      <title>SQL FOR XML合併欄位顯示 SUBSTRING擷取字串</title>
      <link>https://sunnyday0932.github.io/2020/sql-for-xml%E5%90%88%E4%BD%B5%E6%AC%84%E4%BD%8D%E9%A1%AF%E7%A4%BA-substring%E6%93%B7%E5%8F%96%E5%AD%97%E4%B8%B2/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/sql-for-xml%E5%90%88%E4%BD%B5%E6%AC%84%E4%BD%8D%E9%A1%AF%E7%A4%BA-substring%E6%93%B7%E5%8F%96%E5%AD%97%E4%B8%B2/</guid>
      <description>前言 前陣子工作上需求，需要做匯出報表功能，要將不同欄位資料合併再一起後匯出，順手記錄一下。
本文 示範資料表如下
我們需要把相同Level的欄位匯總再一起，做成一個統計用報表。
首先每個區域後面先加、
select District+&#39;、&#39; from DistrictData 接下來使用
select level, ( select District+&#39;、&#39; from DistrictData as B where A.Level = B.Level FOR XML PATH(&#39;&#39;) )AS District FROM DistrictData AS A GROUP BY level 即可得到想要的成果。
其中FOR XML PATH(&#39;&#39;)功能是因為如果沒有加的話會出現以下錯誤訊息。
接下來會發現顯示格式不太對，要加上、的部分最後一筆應該要排除。
這時候就可以使用SUBSTRING
select SUBSTRING(&#39;大安區、信義區、松山區、中山區、中正區、&#39;,0,LEN(&#39;大安區、信義區、松山區、中山區、中正區、&#39;)) 可以得到以下。
SUBSTRING這個語法中SUBSTRING(string, start, lenth)，第1、2個參數代表的是string這個字串中要起始的位置為start，lenth則為最後要計算數字。
簡單實驗一下
select SUBSTRING(&#39;123&#39;,0,3) 這邊我們會得到
參考資料 https://www.1keydata.com/tw/sql/sql-substring.html
https://dotblogs.com.tw/flairming/2014/02/14/143993
https://dotblogs.com.tw/supershowwei/2016/01/26/145353</description>
    </item>
    
    <item>
      <title>Hugo加入留言、觀看人數</title>
      <link>https://sunnyday0932.github.io/2020/hugo%E5%8A%A0%E5%85%A5%E7%95%99%E8%A8%80%E8%A7%80%E7%9C%8B%E4%BA%BA%E6%95%B8/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/hugo%E5%8A%A0%E5%85%A5%E7%95%99%E8%A8%80%E8%A7%80%E7%9C%8B%E4%BA%BA%E6%95%B8/</guid>
      <description>前言 開始使用Hugo後，對於目前使用的主題Leaveit不盡滿意，於是開始研究修改，改完又想在現在版型加上其他功能EX:觀看人數、留言功能，Google搜尋後有很多種方法，選了自己順眼的就開始動工，內容如下。
本文 一、留言功能 留言功能有很多方式，最後決定選用DISQUS，原本還有另一套utteranc，但&amp;hellip;DISQUS看起來較為順眼、再加上留言方式多元於是雀屏中選(?
對沒什麼高尚理由，單純就是覺得好看。
1、先到DISQUS註冊帳號。
2、註冊完後會到以下畫面，選擇下方選項 I want to install Disqus on my site。
(小提醒註冊完後記得先到信箱點選註冊確認信)
3、輸入website名稱，選擇Category分類，點選建立。
4、接下來會到選擇方案頁面，點選下方Basic版本(此為免費版)。
5、接著install頁面，會發現選項內並沒有HUGO，但不打緊，DISQUS提供自行手動設定，步驟稍後說明。
6、最後config設定，加入網站URL註冊步驟就完成了。
接下來就可以開始設定留言功能到我們的HUGO網站。
7、 開啟 Config.toml 加入下方參數。
disqusShortname = &amp;quot;你在DISQUS註冊時輸入的Website name&amp;quot; 8、接著在目錄/layouts/partials/內新增一個disqus.html檔案，官方提供的內容如下。 這邊需要注意的是，如果你是有使用主題，會需要移至主題底下目錄此路經新增。
&amp;lt;div id=&amp;quot;disqus_thread&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; (function() { // Don&#39;t ever inject Disqus on localhost--it creates unwanted // discussions from &#39;localhost:1313&#39; on your Disqus account... if (window.location.hostname == &amp;quot;localhost&amp;quot;) return; var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true; var disqus_shortname = &#39;{{ .</description>
    </item>
    
    <item>
      <title>Hugo架站教學</title>
      <link>https://sunnyday0932.github.io/2020/hugo%E6%9E%B6%E7%AB%99%E6%95%99%E5%AD%B8/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sunnyday0932.github.io/2020/hugo%E6%9E%B6%E7%AB%99%E6%95%99%E5%AD%B8/</guid>
      <description>前言 受到前輩、夥伴、朋友的激勵，決定開始記錄自己學習過程。
這次在架站花了過多時間在調畫面，最後還是沒到自己滿意狀態；但花的時間過久，決定先生出第一篇文章之後再來調剩下的東西。
希望不會就此停留在現在模板😂
本文 這次選擇Hugo主要是因為朋友推薦、中文資源夠多，再加上主題豐富，於是自己花時間摸索一下也覺得不難就決定選用Hugo。
一、環境變數設定 1、首先到Hugo官方提供下載點將相對應個別系統的安裝包下載下來。
2、將下載下來安裝包解壓縮後會得到以下檔案。
3、將hugo.exe檔案複製或剪下至C:\
4、設定系統環境變數，路徑:控制台&amp;gt;系統及安全性&amp;gt;系統&amp;gt;進階系統設定。
5、選擇系統環境設定。
6、系統變數Path點選編輯。
7、新增系統變數，這邊因為我將hugo.exe放在C巢跟目錄底下因此設定為C:\。
8、接下來回到C:\使用CMD測試hugo，輸入hugo version，只要出現以下畫面就代表環境設定完成。
 二、架設方式 1、使用CMD輸入hugo new site &amp;ldquo;你要放資料夾的位子&amp;rdquo;。
2、hugo會自動建立預設資料夾。
然後就可以套用自己想要的主題到themes這個資料架內，主題可以到以下連結選擇。
3、套用主題，在themes資料夾使用CMD輸入git clone &amp;ldquo;你想要的主題&amp;rdquo;。
4、順利下載就會出現許多新資料夾。
5、接下來就是修改內容改成自己想要的樣子就算完成了。
 三、預覽方式 1、在資料夾使用CMD輸入hugo server -v。
 這裡要注意的是因為我們將hugo放在C:\，因此要啟用server時要將路徑給上。   2、接下來只要用瀏覽器輸入http://localhost:1313/就可以看到自己的網站了。
 四、部屬方式 1、首先到Github建立兩個Repository，一個隨便、另一個要為&amp;rsquo;你的帳號&amp;rsquo;.github.io。
2、在hugo存放自己blog的資料夾下建立public，並連結GitHub上自己的Repository。
git submodule add -f https://github.com/sunnyday0932/sunnyday0932.github.io.git public3、在資料夾使用CMD輸入C:\hugo執行建立內容到public，成功的話在public內會出現以下資料夾。
4、將public 內檔案 commit and push 到&amp;rsquo;你的帳號&amp;rsquo;.github.io。
5、回到存放blog的資料夾內，連結git上存放blog的Repository。
git remote add origin https://github.com/sunnyday0932/hugo_blog.git6、commit and push 到github上。
7、接下來只要輸入https://&amp;lsquo;你的帳號&amp;rsquo;.github.io/即可預覽網站。
五、參考連結 https://carrie-lai.github.io/post/createhugoblog/
https://raychiutw.github.io/2019/Hugo-%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%9D%E6%95%99%E5%AD%B8/</description>
    </item>
    
  </channel>
</rss>